name: KiCad CI

on:
  workflow_dispatch:  # Manually trigger the workflow
  push:
    branches:
      [master, main]
  # pull_request:
  #   branches:
  #     [master, main]

permissions:
  contents: write  # Ensure write access for the repository contents

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Find project, schematic, and PCB files
        id: find_files
        run: |
          # Find the .pro project file
          project_file=$(find . -type f -name "*.kicad_pro" | head -n 1)
      
          if [ -z "$project_file" ]; then
            echo "No project file found!"
            exit 1
          fi
      
          # Extract the project name from the .pro file (remove the extension)
          base_name=$(basename "$project_file" .kicad_pro)
      
          # Find the corresponding schematic and PCB files based on the project name
          schematic_file="./${base_name}.kicad_sch"
          pcb_file="./${base_name}.kicad_pcb"
          
          if [ ! -f "$schematic_file" ]; then
            echo "Schematic file $schematic_file does not exist!"
            exit 1
          fi
      
          if [ ! -f "$pcb_file" ]; then
            echo "PCB file $pcb_file does not exist!"
            exit 1
          fi
      
          echo "Found project file: $project_file"
          echo "Found schematic file: $schematic_file"
          echo "Found PCB file: $pcb_file"

          # Store the base name for later use
          echo "base_name=$base_name" >> $GITHUB_ENV
          echo "schematic_file=$schematic_file" >> $GITHUB_ENV
          echo "pcb_file=$pcb_file" >> $GITHUB_ENV

      - name: Install KiCad V8.0.0 (or adjust version if necessary)
        run: |
          sudo add-apt-repository ppa:kicad/kicad-8.0-releases -y
          sudo apt update
          sudo apt install -y kicad

      - name: Generate schematic PDF
        run: |
          # Ensure the 'doc' directory exists
          mkdir -p doc
          
          # Generate the schematic PDF with the project name dynamically inserted
          kicad-cli sch export pdf --output "doc/${{ env.base_name }}-schematic.pdf" ${{ env.schematic_file }}
      
          # Check if the PDF was generated successfully
          if [ ! -f "doc/${{ env.base_name }}-schematic.pdf" ]; then
            echo "Error: schematic PDF was not generated."
            exit 1
          fi
          echo "Schematic PDF generated successfully."

      - name: Generate Gerber files
        run: |
          # Ensure the 'fab' directory exists
          mkdir -p fab

          # Generate the Gerber files
          kicad-cli pcb export gerbers --no-protel-ext -o fab/ "${{ env.pcb_file }}"
          kicad-cli pcb export drill -o fab/ "${{ env.pcb_file }}"

          # Check if any Gerber files were generated in the 'fab' directory
          if [ -z "$(ls fab/*.gbr 2>/dev/null)" ]; then
            echo "Error: Gerber files were not generated."
            exit 1
          fi
          echo "Gerber files generated successfully."

      # - name: Zip Gerber files
      #   run: |
      #     # Create a zip file with the project name
      #     zip -r "fab/${{ env.base_name }}-gerbers.zip" fab/*.gbr fab/*.drl
      #     echo "Gerber files have been zipped into ${{ env.base_name }}gerbers.zip"

      - name: List Generated Files
        run: |
          echo "Contents of doc/:"
          ls -l doc/
          echo "Contents of fab/:"
          ls -l fab/

      - name: Configure Git user
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      
      - name: Commit and push the generated PDF and Gerber files
        run: |
          # Add the schematic PDF
          git add "doc/${{ env.base_name }}-schematic.pdf"

          # Add the Gerber files based on patterns
          git add fab/*_Cu.gbr
          git add fab/*_Paste.gbr
          git add fab/*_Silkscreen.gbr
          git add fab/*_Mask.gbr
          git add fab/*Edge_Cuts.gbr
          for file in fab/*PTH-drl.gbr; do
            [ -e "$file" ] && git add "$file"
          done
          git add fab/*.drl
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          
          # Commit if the files were added
          git commit -m "Add generated schematic PDF and Gerber files"
          
          # Push the commit
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
